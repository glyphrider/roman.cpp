#include <gtest/gtest.h>
#include "roman.h"

class ToRoman : public testing::Test
{
public:
  Roman r;
};

class FromRoman : public testing::Test
{
public:
  Roman r;
};

TEST_F(ToRoman,ConvertOne)
{
  ASSERT_EQ("I",r.to_s(1));
}
TEST_F(ToRoman,ConvertTwo)
{
  ASSERT_EQ("II",r.to_s(2));
}
TEST_F(ToRoman,ConvertThree)
{
  ASSERT_EQ("III",r.to_s(3));
}
TEST_F(ToRoman,ConvertFour)
{
  ASSERT_EQ("IV",r.to_s(4));
}
TEST_F(ToRoman,ConvertFive)
{
  ASSERT_EQ("V",r.to_s(5));
}
TEST_F(ToRoman,ConvertSix)
{
  ASSERT_EQ("VI",r.to_s(6));
}
TEST_F(ToRoman,ConvertNine)
{
  ASSERT_EQ("IX",r.to_s(9));
}
TEST_F(ToRoman,ConvertTen)
{
  ASSERT_EQ("X",r.to_s(10));
}
TEST_F(ToRoman,ConvertForty)
{
  ASSERT_EQ("XL",r.to_s(40));
}
TEST_F(ToRoman,ConvertFifty)
{
  ASSERT_EQ("L",r.to_s(50));
}
TEST_F(ToRoman,ConvertNinety)
{
  ASSERT_EQ("XC",r.to_s(90));
}
TEST_F(ToRoman,ConvertHundred)
{
  ASSERT_EQ("C",r.to_s(100));
}
TEST_F(ToRoman,ConvertFiveHundred)
{
  ASSERT_EQ("D",r.to_s(500));
}
TEST_F(ToRoman,ConvertFourHundred)
{
  ASSERT_EQ("CD",r.to_s(400));
}
TEST_F(ToRoman,ConvertThousand)
{
  ASSERT_EQ("M",r.to_s(1000));
}
TEST_F(ToRoman,ConvertNineHundred)
{
  ASSERT_EQ("CM",r.to_s(900));
}
TEST_F(ToRoman,ConvertNineteenSixtyEight)
{
  ASSERT_EQ("MCMLXVIII",r.to_s(1968));
}

TEST_F(FromRoman,ConvertEmptyString)
{
  ASSERT_EQ(0,r.to_i(""));
}
TEST_F(FromRoman,ConvertOne)
{
  ASSERT_EQ(1,r.to_i("I"));
}
TEST_F(FromRoman,ConvertTwo)
{
  ASSERT_EQ(2,r.to_i("II"));
}
TEST_F(FromRoman,ConvertThree)
{
  ASSERT_EQ(3,r.to_i("III"));
}
TEST_F(FromRoman,ConvertFour)
{
  ASSERT_EQ(4,r.to_i("IV"));
}
TEST_F(FromRoman,ConvertFive)
{
  ASSERT_EQ(5,r.to_i("V"));
}
TEST_F(FromRoman,ConvertSix)
{
  ASSERT_EQ(6,r.to_i("VI"));
}
TEST_F(FromRoman,ConvertNine)
{
  ASSERT_EQ(9,r.to_i("IX"));
}
TEST_F(FromRoman,ConvertTen)
{
  ASSERT_EQ(10,r.to_i("X"));
}
TEST_F(FromRoman,ConvertForty)
{
  ASSERT_EQ(40,r.to_i("XL"));
}
TEST_F(FromRoman,ConvertFifty)
{
  ASSERT_EQ(50,r.to_i("L"));
}
TEST_F(FromRoman,ConvertNinety)
{
  ASSERT_EQ(90,r.to_i("XC"));
}
TEST_F(FromRoman,ConvertHundred)
{
  ASSERT_EQ(100,r.to_i("C"));
}
TEST_F(FromRoman,ConvertFiveHundred)
{
  ASSERT_EQ(500,r.to_i("D"));
}
TEST_F(FromRoman,ConvertFourHundred)
{
  ASSERT_EQ(400,r.to_i("CD"));
}
TEST_F(FromRoman,ConvertThousand)
{
  ASSERT_EQ(1000,r.to_i("M"));
}
TEST_F(FromRoman,ConvertNineHundred)
{
  ASSERT_EQ(900,r.to_i("CM"));
}
TEST_F(FromRoman,ConvertRobotronTwentyEightyFour)
{
  ASSERT_EQ(2084,r.to_i("MMLXXXIV"));
}


int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
